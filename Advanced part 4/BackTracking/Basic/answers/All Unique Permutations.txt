public class Solution {
    HashSet<ArrayList<Integer>> uniqueLists = new HashSet<>();
    public ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> A) {
     boolean visited[] = new boolean[A.size()];
        for(int i=0; i<A.size(); i++){
            visited[i] = false;
        }
        ArrayList<Integer> res = new ArrayList<>();
        perm(A, 0, visited, res);
        return new ArrayList<>(uniqueLists);
    }

    void perm(ArrayList<Integer> A, int idx, boolean[] visited, ArrayList<Integer> res){
        if(idx==A.size()){
            uniqueLists.add(new ArrayList<>(res));
            return;
        }

        for(int i=0; i<A.size(); i++){
            if(!visited[i]){
                visited[i] = true;
                res.add(A.get(i));
                
                perm(A, idx+1, visited, res);
                res.remove(res.size()-1);
                visited[i]=false;
            }
        }
    }
}
