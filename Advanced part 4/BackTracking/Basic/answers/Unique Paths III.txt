import java.util.ArrayList;

public class Solution {

    public int solve(ArrayList<ArrayList<Integer>> A) {
        int n = A.size();
        int m = A.get(0).size();
        int emptySpaces = 0, start_i = 0, start_j = 0;

        // Calculate the number of empty spaces and locate the starting point
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (A.get(i).get(j) == 0) {
                    emptySpaces++;
                } else if (A.get(i).get(j) == 1) {
                    start_i = i;
                    start_j = j;
                }
            }
        }

        // Start DFS from the starting point (1), accounting for the starting square
        return traverse(A, start_i, start_j, emptySpaces, 0);
    }

    public int traverse(ArrayList<ArrayList<Integer>> A, int i, int j, int target, int walk) {
        // Base case: out of bounds or obstacle or already visited
        if (i < 0 || i >= A.size() || j < 0 || j >= A.get(0).size() || A.get(i).get(j) == -1 || A.get(i).get(j) == 3) {
            return 0;
        }

        // If we reach the end square (2), check if all empty spaces have been visited
        if (A.get(i).get(j) == 2) {
            return walk == target ? 1 : 0;
        }

        // Mark the current square as visited by setting it to 3 (visited)
        int temp = A.get(i).get(j); // Store the original value for backtracking
        A.get(i).set(j, 3);

        // Explore all four directions (up, down, left, right)
        int paths = traverse(A, i + 1, j, target, walk + 1)
                  + traverse(A, i - 1, j, target, walk + 1)
                  + traverse(A, i, j + 1, target, walk + 1)
                  + traverse(A, i, j - 1, target, walk + 1);

        // Backtrack: restore the current square to its original value
        A.get(i).set(j, temp);

        return paths;
    }
}
