import java.util.*;

public class Solution {

    ArrayList<ArrayList<Integer>> result = new ArrayList<>();

    public ArrayList<ArrayList<Integer>> subsetsWithDup(ArrayList<Integer> A) {

        Collections.sort(A);
        // Only add the empty subset initially
        result.add(new ArrayList<>());
        generateSubsetsWithDup(0, new ArrayList<>(), A);
        return result;
    }

    public void generateSubsetsWithDup(int i, ArrayList<Integer> subset, ArrayList<Integer> A) {
        // Base case: if we reach the end of the array, return
        if (i == A.size()) {
            return;
        }

        // Include the current element in the subset
        subset.add(A.get(i));
        result.add(new ArrayList<>(subset)); // Add the current subset to the result
        generateSubsetsWithDup(i + 1, subset, A); // Recursively generate subsets

        // Backtrack by removing the last added element
        subset.remove(subset.size() - 1);

        // Skip duplicates
        int next = i + 1;
        while (next < A.size() && A.get(next).equals(A.get(i))) {
            next++;
        }

        // Call the recursive function for the next distinct element
        generateSubsetsWithDup(next, subset, A);
    }
}
