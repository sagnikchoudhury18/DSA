/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public ArrayList<Interval> merge(ArrayList<Interval> intervals) {
        // Sorting the intervals first based on start point and then based on end point.
        Collections.sort(intervals, new IntervalComp());

        int curr_start = intervals.get(0).start;
        int curr_end = intervals.get(0).end;
        ArrayList<Interval> ans = new ArrayList<Interval>();
        for(int i=1;i<intervals.size();i++){
            if(curr_end >=intervals.get(i).start){
                curr_end=Math.max(curr_end,intervals.get(i).end);
            } else{
                ans.add(new Interval(curr_start,curr_end));
                curr_start=intervals.get(i).start;
                curr_end = intervals.get(i).end;
            }
        }
        ans.add(new Interval(curr_start,curr_end));
        return ans;
        
    }
    
    private class IntervalComp implements Comparator<Interval> {
        @Override
        public int compare(Interval interval1, Interval interval2) {
            int cmp =  Integer.compare(interval1.start, interval2.start);
            if (cmp != 0)
                return cmp;
            cmp = Integer.compare(interval1.end, interval2.end);
            return cmp;
        }
    }
}