public class Solution {
    public int[] nextPermutation(int[] A) {

        boolean status = getNextPermutation(A);
        
        if(!status){
            Arrays.sort(A);
            return A;
        } else {
            return A;
        }

    }

    public boolean  getNextPermutation(int[] A){
        int i = 0;
        for(i=A.length-2; i>=0; i--){
            if(A[i]<A[i+1]){
                break;
            }
        }

        if(i==-1){
            return false;
        }

        int j = A.length-1;
        for(j=A.length-1;j>=i;j--){
            if(A[j]>A[i]){
                break;
            }
        }

        swap(A, i, j);

        //Now reverse the remaining nos from i+1 to n
        i+=1;
        int steps = (A.length - i + 1) / 2;
        
        for (int k = 0; k < steps; k++) {
            swap(A, i + k, A.length -1 - k);
        }

        return true;

    } 

    public void swap(int[] A, int i, int j) {
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }
}
