public class Solution {
    public int[] flip(String A) {
        //empty array
        int ans[] = new int[0];
        if(A.length()==0){
            return ans;
        }
        //creating an array of 1s and -1s where 1s represent 0 and -1 rep 1s. This will be used further to apply kadane alg
        int arr[] = new int[A.length()];
        int count = 0;
        for (int i=0; i<A.length(); i++)
        {
            if (A.charAt(i)=='0')
            {
                arr[i]= 1;
            }
            else if (A.charAt(i)=='1')
            {
                arr[i]= -1;
                count++;
            }
        }
        //To print contents of an array
        //System.out.println (Arrays.toString(arr));
        
        // if the number of 1's count is equal to string length then no change required return empty array
        if (count == A.length())
        {
            return ans;
        }
        //tsi: temp start index for every start point , fsi: is the final start point corresponding to the ei
        int sum = 0, maxSum = Integer.MIN_VALUE, tsi = 0, ei = 0, fsi=0;
        
        for(int i=0; i<arr.length; i++){
            
            if (sum<0){
                sum = 0;
                tsi = i;
            }
            sum+=arr[i];
            
            if(maxSum<sum){
                maxSum = sum;
                fsi = tsi;
                ei = i;
            }
        }
        ans = new int [2];
        ans[0] = fsi+1;
        ans[1] = ei+1;
        
        return ans;
    }
}