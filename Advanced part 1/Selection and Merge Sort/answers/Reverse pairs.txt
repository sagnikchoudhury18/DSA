public class Solution {
    public int solve(int[] A) {
        int res = invert (A, 0, A.length-1);
        // for(int i=0; i<=A.length; i++){
        //     System.out.print(A[i] + " ");
        // }
        return res;
    }

    public int invert(int[] A, int start , int end){
        if(start>=end){
            return 0;
        }
        int mid = (start + end)/2;
        int L = invert(A, start, mid);
        int R = invert(A,mid+1, end);
        int C = merge(A, start, mid, end);

        return L+R+C;
    }

    public int merge (int[] A, int start, int mid, int end){
        int p1 = start, p2 = mid+1, p3=0, count = 0;
        int[] temp = new int[end-start+1];
        
        while(p1<=mid && p2<=end){
            if(A[p1]>2L*A[p2]){
                count+=(mid-p1+1);
                p2++;
            } else {
                p1++;
            }
        }

        p1 = start; p2=mid+1;

        while(p1<=mid && p2<=end){
            if(A[p1]>A[p2]){
                temp[p3] = A[p2];
                p2++;
                p3++;
            } else {
                temp[p3] = A[p1];
                p1++;
                p3++;
            }
        }

        while(p1<=mid){
            temp[p3]=A[p1];
            p1++;
            p3++;
        }
        while(p2<=end){
            temp[p3]=A[p2];
            p2++;
            p3++;
        }

        for(int i=start; i<=end; i++){
            A[i] = temp[i-start];
        }

        return count;
    }
}
