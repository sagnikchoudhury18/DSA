/*
Height of the rectangle must be equal to height of any one bar

Get the nearest smaller to the left and nearest smaller to the right. Now area would be A[i] * [(nsL+1), (nsR-1)]

Over here we first find the smallest element for each element to its left and then to its right. In the stack we are storing the location or ith index for the smallest element for an ele to its left and right
*/
public class Solution {
    public int largestRectangleArea(int[] A) {
        if(A.length==1){
            return A[0];
        } 

        Stack<Integer> stk = new Stack<>();
        int[] arr = new int[A.length];
        for(int i=0;i<A.length;i++)
        {
        while(!stk.empty() && A[stk.peek()]>=A[i]) {
             stk.pop();
        }
       

        if(stk.empty()) {
            arr[i] = -1;
        }
        else{
            arr[i] = stk.peek();
        } 
            stk.push(i);
        }

        Stack<Integer> stk1=new Stack<>();
        int[] arr1=new int[A.length];
        for(int i=A.length-1;i>=0;i--)
        {
        while(!stk1.empty() && A[stk1.peek()]>=A[i]) {
            stk1.pop();
        }


        if(stk1.empty()){
             arr1[i]=A.length;
        }
        else {
            arr1[i]=stk1.peek();
        }
        stk1.push(i);
        }

        int area=0;
        int max=0;
        for(int i=0;i<A.length;i++)
        {
        area=(arr1[i]-arr[i]-1)*A[i];
        max=Math.max(max,area);
        }
        return max;
    }
}
