/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {

    int maxValue(TreeNode node) {

        int maxvalue =node.val;

        while(node.right != null) {
            maxvalue = node.right.val;

             node = node.right;
        }
        return maxvalue;
    }

    TreeNode deleteNode(TreeNode root, int key) {

            if(root == null) {
                return root;
            }

            if(root.val > key) {

              root.left = deleteNode(root.left,key);  
            }
            else if (root.val < key) {

                root.right = deleteNode(root.right,key);
            }

            else {

                if(root.right == null) {
                    return root.left;
                }
                else if(root.left == null) {
                    return root.right;
                }

             root.val = maxValue(root.left); // we have two option we can pick smallest from right subtree or largest from
                                            // left subtree but question is specific to inorder predecessor.
                                            // we we convert the tree to inorder list  left of target is predecessor(largest
                                               // from left subtree , i,e left subtree right most) and
                                             //right of target is called successor(smallest from right subtree i,e right subtree leftmost)
            root.left = deleteNode(root.left, root.val);
            }

        return root;    

    }


    public TreeNode solve(TreeNode A, int B) {

        return deleteNode(A,B);
    }
}
