/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */

class Pair {
    TreeNode node;
    int level;
    Pair(TreeNode node, int level){
        this.node = node;
        this.level = level;
    }
}

public class Solution {
    public ArrayList<ArrayList<Integer>> verticalOrderTraversal(TreeNode A) {

        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(A,0));

        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;

        while (queue.size()>0){
            Pair p = queue.poll();
            TreeNode t = p.node;
            int level = p.level;

            max = Math.max(level,max);
            min = Math.min(level,min);

            if(t.left != null){
                queue.add(new Pair(t.left, level-1));
            }

            if(t.right != null){
                queue.add(new Pair(t.right, level+1));
            }

            if(hm.containsKey(level)){
                ArrayList<Integer> a = hm.get(level);
                a.add(t.val);
                hm.put(level, a);
            } else{
                ArrayList<Integer> a = new ArrayList<Integer>();
                a.add(t.val);
                hm.put(level,a);
           }

        }

        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();
        for (int i= min; i<=max; i++){
           ans.add(hm.get(i));
        }


        return ans;
    }
}
